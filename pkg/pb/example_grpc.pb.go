// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: protos/example.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrameServiceClient is the client API for FrameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrameServiceClient interface {
	GetFrame(ctx context.Context, in *GetFrameRequest, opts ...grpc.CallOption) (*Frame, error)
}

type frameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameServiceClient(cc grpc.ClientConnInterface) FrameServiceClient {
	return &frameServiceClient{cc}
}

func (c *frameServiceClient) GetFrame(ctx context.Context, in *GetFrameRequest, opts ...grpc.CallOption) (*Frame, error) {
	out := new(Frame)
	err := c.cc.Invoke(ctx, "/masterclass.go.FrameService/GetFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrameServiceServer is the server API for FrameService service.
// All implementations must embed UnimplementedFrameServiceServer
// for forward compatibility
type FrameServiceServer interface {
	GetFrame(context.Context, *GetFrameRequest) (*Frame, error)
	mustEmbedUnimplementedFrameServiceServer()
}

// UnimplementedFrameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrameServiceServer struct {
}

func (UnimplementedFrameServiceServer) GetFrame(context.Context, *GetFrameRequest) (*Frame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrame not implemented")
}
func (UnimplementedFrameServiceServer) mustEmbedUnimplementedFrameServiceServer() {}

// UnsafeFrameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrameServiceServer will
// result in compilation errors.
type UnsafeFrameServiceServer interface {
	mustEmbedUnimplementedFrameServiceServer()
}

func RegisterFrameServiceServer(s grpc.ServiceRegistrar, srv FrameServiceServer) {
	s.RegisterService(&FrameService_ServiceDesc, srv)
}

func _FrameService_GetFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameServiceServer).GetFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterclass.go.FrameService/GetFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameServiceServer).GetFrame(ctx, req.(*GetFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrameService_ServiceDesc is the grpc.ServiceDesc for FrameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "masterclass.go.FrameService",
	HandlerType: (*FrameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrame",
			Handler:    _FrameService_GetFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/example.proto",
}
